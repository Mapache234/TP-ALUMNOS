/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abmAlumno;

import dao.AlumnoDAOBD;
import dao.AlumnoDAOTxt;
import dao.DAO;
import dao.DAOException;
import abmAlumno.ConexionDB;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import persona.Alumno;
import persona.PersonaInvalidaException;

/**
 *
 * @author nestor
 */
public class ABMAlumno extends javax.swing.JFrame
{

	/**
	 * Creates new form ABMAlumno
	 */
	public ABMAlumno()
	{
		initComponents();
		
		setLocationRelativeTo(null);
		
		modelo = new MiModeloTablaAlumno();
		alumnosTable.setModel(modelo);
		alumnoDialog = new AlumnoDialog(this, true);
                  conexionDb = new ConexionDB(this, true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        alumnosTable = new javax.swing.JTable();
        nuevoButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();
        AltasCheckBox = new javax.swing.JCheckBox();
        BajasCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        archivoRutaText = new javax.swing.JTextField();
        seleccionarArchivoButton = new javax.swing.JButton();
        refrescarButton = new javax.swing.JButton();
        storeComboBox = new javax.swing.JComboBox<>();
        conectarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        alumnosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        alumnosTable.setEnabled(false);
        jScrollPane1.setViewportView(alumnosTable);

        nuevoButton.setText("Nuevo");
        nuevoButton.setEnabled(false);
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoButtonActionPerformed(evt);
            }
        });

        editarButton.setText("Editar");
        editarButton.setEnabled(false);
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        eliminarButton.setText("Eliminar");
        eliminarButton.setEnabled(false);
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        AltasCheckBox.setText("Altas");
        AltasCheckBox.setEnabled(false);

        BajasCheckBox.setText("Bajas");
        BajasCheckBox.setEnabled(false);

        jLabel1.setText("Archivo");

        archivoRutaText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                archivoRutaTextFocusLost(evt);
            }
        });

        seleccionarArchivoButton.setText("...");
        seleccionarArchivoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarArchivoButtonActionPerformed(evt);
            }
        });

        refrescarButton.setText("Refrescar");
        refrescarButton.setEnabled(false);
        refrescarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refrescarButtonActionPerformed(evt);
            }
        });

        storeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TXT Store", "DB Store" }));
        storeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeComboBoxActionPerformed(evt);
            }
        });

        conectarButton.setText("Conectar");
        conectarButton.setEnabled(false);
        conectarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AltasCheckBox)
                            .addComponent(BajasCheckBox))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(archivoRutaText, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seleccionarArchivoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refrescarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conectarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AltasCheckBox)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BajasCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(archivoRutaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(seleccionarArchivoButton)
                        .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conectarButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eliminarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refrescarButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarArchivoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_seleccionarArchivoButtonActionPerformed
    {//GEN-HEADEREND:event_seleccionarArchivoButtonActionPerformed
        
            JFileChooser fileChooser = new JFileChooser();

                    int ret = fileChooser.showOpenDialog(this);

                    if(ret != JFileChooser.APPROVE_OPTION)
                            return;

                    archivoFile = fileChooser.getSelectedFile();

                    archivoRutaText.setText(archivoFile.getAbsolutePath());

                    try
                    {
                            dao = new AlumnoDAOTxt(archivoFile);
                    }
                    catch(FileNotFoundException ex)
                    {
                            Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
                    }
    
                    primeraConexion();
    }//GEN-LAST:event_seleccionarArchivoButtonActionPerformed
	
	
    private void nuevoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nuevoButtonActionPerformed
    {//GEN-HEADEREND:event_nuevoButtonActionPerformed
//                if(archivoRutaText.getText().equals(""))
//		{
//                    JOptionPane.showMessageDialog(this, "Debe seleccionar un fichero", "Error", JOptionPane.ERROR_MESSAGE);
//                    return;
//		}	
                Alumno alu = alumnoDialog.mostrarDialogoCrear();
		
		if(alu == null)
			return;
		
		try
		{
			dao.insertar(alu);
		}
		catch(DAOException ex)
		{
			Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
			return;
		}
		
		alumnos.add(alu);
		
		modelo.fireTableDataChanged();
    }//GEN-LAST:event_nuevoButtonActionPerformed

    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editarButtonActionPerformed
    {//GEN-HEADEREND:event_editarButtonActionPerformed
//            if(archivoRutaText.getText().equals(""))
//		{
//                        JOptionPane.showMessageDialog(this, "Debe seleccionar un fichero", "Error", JOptionPane.ERROR_MESSAGE);
//                        return;
//		}
                int filaSel = alumnosTable.getSelectedRow();
		
		if(filaSel == -1)
		{
			JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
                
		Alumno alu = alumnos.get(filaSel);
                
		//paraborrar
//                if(alu.getEstado() == 'E')
//		{
//                        JOptionPane.showMessageDialog(this, "No se puede modificar un registro eliminado", "Error", JOptionPane.ERROR_MESSAGE);
//                        return;
//		}
                //paraborrar
                
		if(!alumnoDialog.mostraDialogoEditar(alu))
		{
			return;
		}
		
		try
		{
			dao.actualizar(alu);
		}
		catch(DAOException ex)
		{
			Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
			return;
		}
		
		modelo.fireTableDataChanged();
    }//GEN-LAST:event_editarButtonActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eliminarButtonActionPerformed
    {//GEN-HEADEREND:event_eliminarButtonActionPerformed
        //No se puede en TXT
                //paraborrar
//                if(archivoRutaText.getText().equals(""))
//		{
//			JOptionPane.showMessageDialog(this, "Debe seleccionar un fichero", "Error", JOptionPane.ERROR_MESSAGE);
//			return;
//		}
                int filaSel = alumnosTable.getSelectedRow();
		
		if(filaSel == -1)
		{
			JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		if(storeComboBox.getSelectedItem()== "DB Store"){
		Alumno alu = alumnos.get(filaSel);
                
              //  alu.setEstado('E');
                
		try
		{
			dao.eliminar(alu);
		}
		catch(DAOException ex)
		{
			Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
			return;
		}
		
		modelo.fireTableDataChanged();
                refrescarLista();
                }else{
                    JOptionPane.showMessageDialog(this, "No se puede eliminar en TXT", "Error", JOptionPane.ERROR_MESSAGE);
			return;
                }
                //paraborrar
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void refrescarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refrescarButtonActionPerformed
	    //modelo.fireTableDataChanged();
            refrescarLista();
    }//GEN-LAST:event_refrescarButtonActionPerformed

    private void refrescarLista(){
                try
                {
                if(AltasCheckBox.isSelected() && BajasCheckBox.isSelected()
                   || !AltasCheckBox.isSelected() && !BajasCheckBox.isSelected()){
                    alumnos = dao.getTodos();
                }else{                    
                        if(AltasCheckBox.isSelected()){
                            alumnos = dao.getAltas();
                        }else{
                                alumnos = dao.getBajas();
                        }
                }
                }
                catch(DAOException ex)
                {
                        Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                modelo.setLista(alumnos);
        
    }
    private void archivoRutaTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_archivoRutaTextFocusLost
            if(archivoRutaText.getText().equals(""))
		{
                    alumnosTable.setEnabled(false);
                    BajasCheckBox.setEnabled(false);
                    AltasCheckBox.setEnabled(false);
                    nuevoButton.setEnabled(false);
                    editarButton.setEnabled(false);
                    eliminarButton.setEnabled(false);
                    refrescarButton.setEnabled(false);
                }
    }//GEN-LAST:event_archivoRutaTextFocusLost

    private void storeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeComboBoxActionPerformed
        if(storeComboBox.getSelectedItem()=="DB Store"){
            conectarButton.setEnabled(true);
            seleccionarArchivoButton.setEnabled(false);
        }else{
            alumnos = new LinkedList<Alumno>();
            modelo.setLista(alumnos);

            conectarButton.setEnabled(false);
            alumnosTable.setEnabled(false);
            BajasCheckBox.setEnabled(false);
            AltasCheckBox.setEnabled(false);
            nuevoButton.setEnabled(false);
            editarButton.setEnabled(false);
            eliminarButton.setEnabled(false);
            refrescarButton.setEnabled(false);
            seleccionarArchivoButton.setEnabled(true);     
        }

    
    }//GEN-LAST:event_storeComboBoxActionPerformed

    private void conectarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectarButtonActionPerformed
        int port;
        String user, password, db;
        
        if(conexionDb.mostrarConexionDB()){
        
        port = conexionDb.getPort();
        db = conexionDb.getDatabase();
        user = conexionDb.getUser();
        password = conexionDb.getPassword();
        
        if(port == 0)
            port = 3306;
                
        if(user.equals(""))
            user = "root";

        if(password.equals(""))
            password = "root";
        
        try
        {
//            dao = new AlumnoDAOBD("localhost", conexionDb.getPort(), conexionDb.getDatabase(),
//                    conexionDb.getUser(), conexionDb.getPassword());
            dao = new AlumnoDAOBD("localhost", port, db, user, password);
        }
        catch(SQLException ex)
        {
            Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
        }
        seleccionarArchivoButton.setEnabled(false);

        primeraConexion();
        }
    }//GEN-LAST:event_conectarButtonActionPerformed

    private void primeraConexion(){
         try
            {
                alumnos = dao.getTodos();
            }
            catch(DAOException ex)
            {
                Logger.getLogger(ABMAlumno.class.getName()).log(Level.SEVERE, null, ex);
            }

            alumnosTable.setEnabled(true);
            BajasCheckBox.setEnabled(true);
            AltasCheckBox.setEnabled(true);
            nuevoButton.setEnabled(true);
            editarButton.setEnabled(true);
            eliminarButton.setEnabled(true);
            refrescarButton.setEnabled(true);

            modelo.setLista(alumnos);
    }
    
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch(ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(ABMAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(ABMAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(ABMAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(ABMAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new ABMAlumno().setVisible(true);
			}
		});
	}
	
	
	private File archivoFile;
	private DAO<Alumno, Integer> dao;
	private List<Alumno> alumnos;
	private MiModeloTablaAlumno modelo;
	private AlumnoDialog alumnoDialog;
        private ConexionDB conexionDb;
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AltasCheckBox;
    private javax.swing.JCheckBox BajasCheckBox;
    private javax.swing.JTable alumnosTable;
    private javax.swing.JTextField archivoRutaText;
    private javax.swing.JButton conectarButton;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JButton refrescarButton;
    private javax.swing.JButton seleccionarArchivoButton;
    private javax.swing.JComboBox<String> storeComboBox;
    // End of variables declaration//GEN-END:variables
}
